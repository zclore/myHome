# 6.1
1.
提高内存利用效率和管理灵活性
2.
大块好管理，小块更灵活
3.
- 固定大小好管理，多种大小比一种大小灵活
- 可变大小更灵活，通常可变大小也会通过对齐来减少管理难度
# 6.2
1.
- 段表示访问方式和存储数据等属性相同的一段地址空间
-段基址是每一段的段首地址
- 段偏移是指段内相对于段起始位置的偏移值
2.
- 流程：逻辑地址分为段号和偏移，分配时通过段号找段表知道段基址和长度，长度和偏移进行比较，若合理就可以根据基址和偏移找到地址。
- 段反映了程序的存储逻辑结构，程序不会从一个段的基址去访问另一个段，于是不同的段可以不连续。
- 好处是可以不连续，方便内存管理，坏处是地址转换变复杂
# 6.3
1.
- 页：进程逻辑地址的划分。
- 帧：物理内存的划分
- 页表：特殊的数据结构，存放逻辑页与物理页帧的对应关系
- MMU：负责虚拟地址到物理地址的映射，并提供硬件机制的内存访问权限检查。重点在于地址映射：页表结构的建立与映射过程。
- TLB:一个内存管理单元,用于改进虚拟地址到物理地址转换速度的缓存。
- Cache:高速缓存目前都是集成在处理器中，作为内存和处理器之间的缓冲区域，存放常用数据和从内存中读到的即将发送给处理器运算的数据，加快处理速度。
2.
- 转换机制：逻辑地址分为页号和偏移，分配时通过页号查找找页表知道帧号，加上偏移就找到地址。
- 因为通过页表的转换，逻辑地址连续就可以，物理地址是否连续对进程没有影响。
- 好处是可以不连续，方便内存管理，坏处是地址转换变复杂
# 6.4
1.
页号，块号，存在位，修改位，引用位。
- 存在位：用于判断该页是不是在内存中，如果是0，表示该页面不在内存中，会引起一个缺页中断 。
- 修改位：用于页面的换出，如果某个页面被修改过（即为脏），在淘汰该页时，必须将其写回磁盘，反之，可以直接丢弃该页。
- 引用位：用于clock置换算法。
2.
页大小，地址空间大小，进程数目
# 6.5
1.
TLB主要用于页表缓存，cache通常有好几级，缓存内存数据副本，一般比TLB大多了，速度都是非常快的。
2.
快表是一块小容量的相联存储器，由高速缓存器组成，速度快，并且可以从硬件上保证按内容并行查找。减少查询页表的流程。快表的容量小可能因为成本问题，根据局部性，内存够用就行，造大了会增加成本。
3.
- 多级页表通过间接引用将页号分成k级。建立页表树，减少每级页表的长度。
- 把逻辑地址划分为多个页偏移和一个偏移。通过第一级页表加第一个偏移找到第二级页号，再加上第二个页偏移找到第三级页号，以此类推，找到物理页帧号，加上偏移就是物理地址。
- 优点是节省页表空间，缺点是减慢映射速度
# 6.6
1.
逻辑地址进行hash，然后查相应页寄存器
2.
逻辑地址和进程号共同进行hash，然后查相应页寄存器
3.
PID、逻辑页号、标志位
# 6.7
1.
逻辑地址划分为段号，页号和页内偏移，先查找段表找到页基址，通过页号找到物理帧号，加上偏移就是物理地址。
好处是综合段式，页式存储的优点，还便于共享，缺点是降低映射速度。
2.
段的共享是指某些作业的段号对应同一物理页号(内存中该段的起始地址)。一般由硬件实现。
3.
页的共享是使相关进程的逻辑空间中的页指向相同的内存块，若页中既有共享的部分又有不共享的部分则不好实现。页面保护必须设置存储保护键指明对其内容的存取权限
