# [16.1]
1.
~~~
volatile bool need_resched; // bool value: need to be rescheduled to release CPU?

uint32_t wait_state; // waiting state

list_entry_t run_link; // the entry linked in run queue

int time_slice; // time slice for occupying the CPU

skew_heap_entry_t lab6_run_pool; // FOR LAB6 ONLY: the entry in the run pool

uint32_t lab6_stride; // FOR LAB6 ONLY: the current stride of the process

uint32_t lab6_priority; // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
~~~
2.
static struct run_queue;
3.
static list_entry_t timer_list;
4.
- 触发
- 入队
- 选取
- 出队
- 切换
# [16.2]
1.
初始化、触发、选取、出队、入队、切换
2.
- do_exit:用户线程执行结束，主动放弃CPU。
- do_wait:用户线程等待子进程结束，主动放弃CPU。
- init_main: Initproc内核线程等待所有用户进程结束，所有用户进程结束后，回收系统资源。
- cpu_idle:idleproc内核线程等待处于就绪态的进程或线程，如果有，选取一个并切换进程。
- lock：进程如果无法得到锁，则主动放弃CPU。
- trap：修改当前时间片，若时间片用完，则设need_resched为1，让当前进程放弃CPU。
# [16.3]
1.
kern/schedule/default_sched.c</br>
struct sched_class default_sched_class
2.
时钟中断时会检查时间片的计数，到达零（时间片用完）时，设置可调度标志（need_resched）。
# [16.4]
1.
步长值stride</br>
步进值pass</br>
以步长为优先级的动态优先级调度算法；每次执行一个时间片，时间片用完时，优先级增加量为“步进”值。
2.
- 基于优先级
- 调度选择是确定的
3.
利用无符号数的有符号比较，从而避免步长值修改时的溢出处理；
4.
5.
斜堆的堆顶是优先级最小的节点；斜堆的合并时间开销为O(logN)，删除最小节点操作和插入操作都可以转换成合并操作，开销很小；










