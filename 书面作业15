# [15.1]
1.
从就绪队列中挑选下一个占用CPU运行的进程。</br>
从多个可用CPU中挑选就绪进程可使用的CPU资源。</br>
2.
进程从运行状态切换到等待状态或进程被终结了。</br>
中断请求被服务例程响应完成时。</br>
当前进程被强占。</br>
3.
系统调用返回时可能出现线程切换.
# [15.2]
1.
进程在CPU计算和I/O操作间交替。</br>
2.
- 减少响应时间。
- 减少平均响应时间波动。
- 增加吞吐量
- 减少等待时间
- 公平性
3.
4.
5.
# [15.3]
1.
先来先服务算法：依据进程进入就绪状态的先后顺序排序，进程进入等待或结束状态时，就绪队列下一个进程占用CPU。优点是简单，缺点是平均等待时间波动较大，I/O资源和CPU资源利用率较低。</br>
短进程优先算法：选择就绪队列中执行时间最短的进程占用CPU进入运行状态。优点是最优平均周转时间，缺点是可能导致饥饿，还需要预知未来。
高响应比优先算法：选择就绪队列中响应比R值最高的进程。优点是防止无限期的等待。
2.
![](https://github.com/zclore/homework/blob/master/7.PNG?raw=true)
3.
监控调度算法的执行状态、调度结果、算法特征等信息。
# [15.4]
1.
时间片轮转算法：时间片结束后，按照先来先服务算法切换到下一进程。优点是平均等待时间波动不大，缺点是额外的上下文切换。
多级反馈队列调度算法：就绪队列被划分成多个独立的子队列，每个队列拥有自己的调度算法，进程可在不同的队列间移动。
公平共享调度：控制用户对系统资源的访问。
2.
- 进程切换开销
- 进程当前操作占用的CPU时间
- 切换开销与响应时间的折中权衡
3.
- I/O操作后提升优先级
- 时间片用完后降低优先级
4.
中断响应、进程的中断现场保存、中断处理、调度判断、进程切换、新进程的中断现场恢复、新进程的继续执行。
5.
- 引入调度框架的目的：分离调度操作和调度策略，以支持多种调度算法；
- 定义调度算法接口的考虑因素：调度算法需要的调度操作类型、调度算法在各调度操作中的体现方式；
6.
7.
8.
# [15.5]
1.
实时操作系统：正确性依赖于其时间和功能两方面的操作系统。
2.
可调度表示一个实时操作系统能够满足任务时限的要求。
3.
速率单调调度算法：通过周期安排优先级，周期越短优先级越高，执行周期最短的任务。
最早截止时间优先算法：截止时间越早优先级越高，执行截止时间最早的任务。
4.
5.
区别：调度开销、负载均衡程度。
# [15.6]
1.
操作系统中出现高优先级进程长时间等待低优先级进程所占用资源的状态。
2.
- 优先级继承：占用资源的低优先级进程继承申请资源的高优先级进程的优先级。
- 优先级天花板协议：占用资源进程的优先级和所有可能申请该资源的进程的最高优先级相同
- 区别：提升占用资源的低优先级进程的优先级的时机不同。
3.
4.







